#!/usr/bin/env python3
"""
Script para testar se todas as importa√ß√µes est√£o funcionando
"""

def test_imports():
    """Testa todas as importa√ß√µes necess√°rias"""
    try:
        print("üîç Testando importa√ß√µes...")
        
        # Testa importa√ß√µes b√°sicas
        print("‚úÖ Importando FastAPI...")
        from fastapi import FastAPI
        
        print("‚úÖ Importando Pydantic...")
        from pydantic import BaseModel
        
        print("‚úÖ Importando configura√ß√µes...")
        from config import settings
        
        print("‚úÖ Importando auth service...")
        from app.auth.auth_service import AuthService
        
        print("‚úÖ Importando auth schemas...")
        from app.auth.auth_schemas import LoginRequest, RegisterRequest
        
        print("‚úÖ Importando auth controller...")
        from app.auth.auth_controller import router as auth_router
        
        print("‚úÖ Importando auth middleware...")
        from app.auth.auth_middleware import require_auth
        
        print("‚úÖ Importando professor schemas...")
        from app.professor.schemas import ProfessorCreate, ProfessorResponse
        
        print("‚úÖ Importando professor service...")
        from app.professor.service import ProfessorService
        
        print("‚úÖ Importando professor controller...")
        from app.professor.controller import router as professor_router
        
        print("‚úÖ Importando main app...")
        from app.main import app
        
        print("üéâ Todas as importa√ß√µes funcionaram!")
        # CORRE√á√ÉO: Usamos 'assert True' para indicar sucesso ao pytest.
        assert True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        # CORRE√á√ÉO: Usamos 'assert False' com uma mensagem para indicar falha ao pytest.
        assert False, f"Erro de importa√ß√£o: {e}"
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        # CORRE√á√ÉO: Usamos 'assert False' com uma mensagem para indicar falha ao pytest.
        assert False, f"Erro inesperado: {e}"


if __name__ == "__main__":
    # Esta fun√ß√£o √© para executar o script diretamente, n√£o via pytest.
    # Ela n√£o precisa de 'assert'.
    def run_check():
        try:
            test_imports()
            # Se o assert n√£o falhou, significa sucesso.
            return True
        except AssertionError:
            return False

    success = run_check()
    if success:
        print("\nüöÄ O projeto est√° pronto para ser executado!")
        print("Execute: python run.py")
    else:
        print("\n‚ùå H√° problemas que precisam ser resolvidos.")